spring:
  application:
    name: "applicationservices"
  devtools:
    add-properties: false
  r2dbc:
    url: "r2dbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
    username: "${POSTGRES_USER}"
    password: "${POSTGRES_PASSWORD}"
    pool:
      enabled: true
      initial-size: 2
      max-size: 20
      max-idle-time: "30m"
      validation-query: "SELECT 1"
  sql:
    init:
      mode: never

postgres:
  host: "${POSTGRES_HOST:127.0.0.1}"
  port: "${POSTGRES_PORT}"
  database: "${POSTGRES_DB}"
  schema: "public"
  username: "${POSTGRES_USER}"
  password: "${POSTGRES_PASSWORD}"

server:
  port: "${PORT}"
  error:
    include-message: "always"

management:
  endpoints:
    web:
      exposure:
        include: "health,prometheus"
  endpoint:
    health:
      probes:
        enabled: true
  health:
    circuitbreakers:
      enabled: true

cors:
  allowed-origins: "http://localhost:4200,http://localhost:8081"

logging:
  level:
    org.springframework.r2dbc: "DEBUG"
    bootcamp.reto.powerup.r2dbc: "DEBUG"
    org.springframework.web.reactive: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

adapter:
  restconsumer:
    timeout: 5000
    url: "${URL_CONSUMER}"
  sqs:
    region: "${AWS_REGION}"
    queueUrl: "${AWS_SQS_QUEUE_URL}"
    queue-capacity-url: "${AWS_SQS_QUEUE_CAPACITY_URL}"
    queue-report: "${AWS_SQS_QUEUE_REPORTS}"
    credentials:
      access-key: "${AWS_ACCESS_KEY_ID}"
      secret-key: "${AWS_SECRET_ACCESS_KEY}"

jwt:
  secret-key: "${JWT_SECRET_KEY}"
  expiration: "${JWT_EXPIRATION}"

entrypoint:
  sqs:
    region: "${AWS_REGION}"
    endpoint: "${AWS_ENDPOINT}"
    queueUrl: "${AWS_QUEUE_URL_UPDATE}"
    waitTimeSeconds: 20
    maxNumberOfMessages: 10
    visibilityTimeoutSeconds: 10
    numberOfThreads: 1
