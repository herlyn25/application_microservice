services:
  powerup_applications:
    image: postgres:16
    container_name: powerup_apps
    restart: always
    environment:
      POSTGRES_DB: crediyapps
      POSTGRES_USER: hdj
      POSTGRES_PASSWORD: salsam2323
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data  # persistent data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - crediya-network

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 20

  requests_crediya:
    env_file:
      - .env
    build:
      context: .
      dockerfile: deployment/Dockerfile
    container_name: requests_container
    environment:
      - PORT=8081
      - REST_CONSUMER_URL=http://host.docker.internal:8080
      - SPRING_PROFILES_ACTIVE=docker
      - POSTGRES_HOST=powerup_applications
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=crediyapps
      - POSTGRES_USERNAME=hdj
      - POSTGRES_PASSWORD=salsam2323
      - AWS_REGION=${AWS_REGION}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SQS_QUEUE_URL=${AWS_SQS_QUEUE_URL}
      - AWS_SQS_QUEUE_CAPACITY_URL=${AWS_SQS_QUEUE_CAPACITY_URL}
      - AWS_ENDPOINT=${AWS_ENDPOINT}
      - AWS_QUEUE_URL_UPDATE=${AWS_QUEUE_URL_UPDATE}
      - AWS_SQS_QUEUE_REPORTS=${AWS_SQS_QUEUE_REPORTS}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
    ports:
      - "8081:8081"
    depends_on:
      powerup_applications:
        condition: service_healthy
    networks:
      - crediya-network
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

networks:
  crediya-network:
    driver: bridge

volumes:
  postgres_data:

